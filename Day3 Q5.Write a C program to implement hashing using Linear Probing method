#include <stdio.h>
#include <stdlib.h>

#define SIZE 10
struct HashEntry {
    int key;
    int value;
};

struct HashTable {
    struct HashEntry* table[SIZE];
};
struct HashTable* createHashTable() {
    struct HashTable* ht = (struct HashTable*)malloc(sizeof(struct HashTable));
    for (int i = 0; i < SIZE; i++) {
        ht->table[i] = NULL;
    }
    return ht;
}
int hash(int key) {
    return key % SIZE;
}

void insert(struct HashTable* ht, int key, int value) {
    int index = hash(key);
    while (ht->table[index] != NULL) {
        index = (index + 1) % SIZE; // Linear probing
    }
    
    struct HashEntry* entry = (struct HashEntry*)malloc(sizeof(struct HashEntry));
    entry->key = key;
    entry->value = value;
    ht->table[index] = entry;
}

int get(struct HashTable* ht, int key) {
    int index = hash(key);
    while (ht->table[index] != NULL && ht->table[index]->key != key) {
        index = (index + 1) % SIZE; // Linear probing
    }
    
    if (ht->table[index] != NULL) {
        return ht->table[index]->value;
    } else {
        return -1; // Key not found
    }
}

int main() {
    struct HashTable* ht = createHashTable();

    insert(ht, 5, 10);
    insert(ht, 15, 20);
    insert(ht, 25, 30);
    
    printf("Value at key 5: %d\n", get(ht, 5));
    printf("Value at key 15: %d\n", get(ht, 15));
    printf("Value at key 25: %d\n", get(ht, 25));
    printf("Value at key 35: %d\n", get(ht, 35));

    return 0;
}
